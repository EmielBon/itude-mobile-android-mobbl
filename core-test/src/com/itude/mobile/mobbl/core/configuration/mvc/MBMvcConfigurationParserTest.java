/*
 * (C) Copyright Itude Mobile B.V., The Netherlands
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.itude.mobile.mobbl.core.configuration.mvc;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import android.test.ApplicationTestCase;

import com.itude.mobile.android.util.AssetUtil;
import com.itude.mobile.mobbl.core.MBApplicationCore;
import com.itude.mobile.mobbl.core.controller.MBOutcome;

public class MBMvcConfigurationParserTest extends ApplicationTestCase<MBApplicationCore>
{

  private MBMvcConfigurationParser  parser;

  private byte[]                    data;

  private MBConfigurationDefinition config;

  private enum Dialog {
    TAB1("DIALOG-tab_1", "STACK", "ICON-tab_1", "Tab 1"), //
    TAB2("DIALOG-tab_2", "STACK", "ICON-tab_2", "Tab 2"), //
    TAB3("DIALOG-tab_3", "STACK", "ICON-tab_3", "Tab 3"), //
    TAB4("DIALOG-tab_4", "STACK", "ICON-tab_4", "Tab 4");

    private String _name;
    private String _mode;
    private String _icon;
    private String _title;

    private Dialog(String name, String mode, String icon, String title)
    {
      _name = name;
      _mode = mode;
      _icon = icon;
      _title = title;
    }

    public String getName()
    {
      return _name;
    }

    public String getMode()
    {
      return _mode;
    }

    public String getIcon()
    {
      return _icon;
    }

    public String getTitle()
    {
      return _title;
    }
  }

  public MBMvcConfigurationParserTest()
  {
    super(MBApplicationCore.class);

  }

  @Override
  protected void setUp() throws Exception
  {
    parser = new MBMvcConfigurationParser();

    if (config == null)
    {
      AssetUtil.getInstance().setContext(getContext());
      data = AssetUtil.getInstance().getByteArray("unittests/config_unittests.xml");
      config = (MBConfigurationDefinition) parser.parseData(data, "Config");
    }
  }

  public void testConfigParsing()
  {
    assertNotNull(config);
  }

  public void testDocumentsElementsAndAttributes()
  {
    assertNotNull(config);

    MBDocumentDefinition docDef = config.getDefinitionForDocumentName("Books");
    assertNotNull(docDef);

    MBElementDefinition resultDef = docDef.getChildWithName("Author");
    assertNotNull(resultDef);

    MBElementDefinition childDef = resultDef.getChildElements().get(0);

    assertEquals("Book", childDef.getName());

    assertEquals(7, childDef.getAttributes().size());

    String[] attributes = childDef.getAttributeNames().split(",");

    for (int j = 0; j < attributes.length; j++)
    {
      MBAttributeDefinition attribute = childDef.getAttributeWithName(attributes[j].replaceAll(" ", ""));
      assertNotNull(attribute);
      assertEquals("string", attribute.getType());
      assertEquals(attributes[j].replaceAll(" ", ""), attribute.getName());
    }
  }

  public void testActions()
  {
    assertNotNull(config);

    Iterator<String> actions = config.getActions().keySet().iterator();
    while (actions.hasNext())
    {
      String action = actions.next();
      MBActionDefinition actionDef = config.getActions().get(action);
      assertNotNull(actionDef);
      assertEquals(action, actionDef.getClassName());
      assertEquals(action, actionDef.getName());
    }

  }

  public void testOutcomes()
  {
    assertNotNull(config);

    // the dialogs are included due to the implicit outcomes generated by them
    assertEquals(14, config.getOutcomes().size());

    List<MBOutcomeDefinition> outcomes1 = config.getOutcomeDefinitionsForOrigin((new MBOutcome.Origin()).withPage("PAGE-tab_1"), "OUTCOME-page_1");
    assertNotNull(outcomes1);
    assertEquals(2, outcomes1.size());

    for (int i = 0; i < outcomes1.size(); i++)
    {
      MBOutcomeDefinition outDef = outcomes1.get(i);
      assertNotNull(outDef);
      assertEquals("PAGE-tab_1", outDef.getOrigin());
      assertEquals("OUTCOME-page_1", outDef.getName());

      if (i == 0)
      {
        assertEquals("!${SessionState:Session[0]/@loggedIn}", outDef.getPreCondition());
        assertEquals("PAGE-page_1", outDef.getAction());
        assertEquals("MODAL", outDef.getDisplayMode());
      }
      else
      {
        assertEquals("${SessionState:Session[0]/@loggedIn}", outDef.getPreCondition());
        assertEquals("Page1Action", outDef.getAction());

      }

    }
  }

  public void testDialogs()
  {
    assertNotNull(config);

    Dialog[] referenceDialogs = Dialog.values();
    List<Dialog> referenceDialogsList = Arrays.asList(referenceDialogs);
    assertEquals(referenceDialogsList.size(), config.getDialogs().size());

    List<MBDialogDefinition> configDialogs = new ArrayList<MBDialogDefinition>(config.getDialogs().values());

    for (int i = 0; i < configDialogs.size(); i++)
    {
      Dialog dialogReference = referenceDialogsList.get(i);
      MBDialogDefinition configDialogDef = configDialogs.get(i);

      assertNotNull(configDialogDef);
      assertEquals(dialogReference.getName(), configDialogDef.getName());
      assertEquals(dialogReference.getMode(), configDialogDef.getMode());
      assertEquals(dialogReference.getIcon(), configDialogDef.getIcon());
      assertEquals(dialogReference.getTitle(), configDialogDef.getTitle());

      MBDialogDefinition testDef = config.getDefinitionForDialogName(configDialogDef.getName());
      assertNotNull(testDef);
      assertEquals(configDialogDef, testDef);
    }
  }

  public void testPages()
  {
    assertNotNull(config);

    assertNotNull(config.getPages());
    assertEquals(2, config.getPages().size());

    MBPageDefinition page = config.getDefinitionForPageName("PAGE-page_1");
    assertNotNull(page);
    assertEquals("MBEmptyDoc", page.getDocumentName());
    assertEquals("Page title", page.getTitle());
    assertEquals(1, page.getChildren().size());

    MBPanelDefinition panel = (MBPanelDefinition) page.getChildren().get(0);
    assertNotNull(panel);
    assertEquals(2, panel.getChildren().size());

    MBPanelDefinition subPanel = (MBPanelDefinition) panel.getChildren().get(0);
    assertNotNull(subPanel);
    assertEquals("SECTION", subPanel.getType());
    assertEquals("${SessionState:Session[0]/@loggedIn}", subPanel.getPreCondition());
    assertEquals("Header title", subPanel.getTitle());
  }

  public void testDomainAndDomainValidators()
  {
    assertNotNull(config);

    assertEquals(2, config.getDomains().size());

    Iterator<MBDomainDefinition> iterator = config.getDomains().values().iterator();

    while (iterator.hasNext())
    {
      MBDomainDefinition domDef = iterator.next();
      assertNotNull(domDef);
      assertEquals(domDef, config.getDefinitionForDomainName(domDef.getName()));
    }

    MBDomainDefinition months = config.getDefinitionForDomainName("list_months");
    assertNotNull(months);
    assertEquals("list_months", months.getName());
    assertEquals("string", months.getType());
    assertEquals(12, months.getDomainValidators().size());

    String[] monthValues = {"Januari", //
        "Februari", //
        "Maart", //
        "April", //
        "Mei", //
        "Juni", //
        "Juli", //
        "Augustus", //
        "September", //
        "Oktober", //
        "November", "December"};
    for (int i = 0; i < months.getDomainValidators().size(); i++)
    {
      MBDomainValidatorDefinition domValDef = months.getDomainValidators().get(i);
      assertNotNull(domValDef);
      assertEquals(monthValues[i], domValDef.getTitle());
      assertEquals(Integer.toString((i + 1)), domValDef.getValue());
    }

  }

}
